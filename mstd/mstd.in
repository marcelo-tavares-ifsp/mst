#!@GUILE@ \
-e main -s
# aside from this initial boilerplate, this is actually -*- scheme -*- code
!#

;;; mstd -- MST daemon.

;; Copyright (C) 2020-2022 "AZ Company Group" LLC <https://gkaz.ru/>
;; Copyright (C) 2020-2022 Artyom V. Poptsov <a@gkaz.ru>
;;
;; This program is free software: you can redistribute it and/or modify it under
;; the terms of the GNU General Public License as published by the Free Software
;; Foundation, either version 3 of the License, or (at your option) any later
;; version.
;;
;; This program is distributed in the hope that it will be useful, but WITHOUT
;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
;; FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
;; details.
;;
;; You should have received a copy of the GNU General Public License along with
;; this program. If not, see <https://www.gnu.org/licenses/>.


;;; Commentary:

;; mstd -- The MST daemon that listens to USB device states by means of udev and
;; mounts attached USB devices for the multi-seat users.


;;; Code:

(use-modules (ice-9 popen)
             (ice-9 rdelim)
             (ice-9 getopt-long)
             (mst system)
             (mst core config)
             (mst core log)
             (mst device-listener)
             (mst dm))


;;; Global constants and variables:

(define %default-pid-file      "/var/run/mstd.pid")
(define %default-display-server-backend "xephyr-docker")
(define %seat-configuration-file "/etc/mst-seats")

(define *debug?* #f)


(define *option-spec*
  '((pid-file                 (value #t))
    (detach                   (value #f))
    (display-server-backend (single-char #\b) (value #t))
    (debug                    (value #f))
    (stderr                   (value #f))
    (help   (single-char #\h) (value #f))))

(define (write-pid pid-file)
  "Write the process PID to a specified PID-FILE."
  (let ((p (open-output-file pid-file)))
    (write (getpid) p)
    (close p)))

(define (read-pid pid-file)
  (let* ((p   (open-input-file pid-file))
         (pid (string->number (read-line p))))
    (close p)
    pid))


(define (print-help-and-exit)
  "Print the help message and exit."
  (display (string-append "\
Usage: mstd [ options ]

Options:
  --detach                      Detach mode.
  --debug                       Debug mode.
  --pid-file=<file-name>        File to store PID after the server starts to
                                listen to the socket.
                                Default: " %default-pid-file "
  --stderr                      Print the logs to stderr as well as to
                                the system log.
  --display-server-backend, -b  Set the display server backend.
                                When \"xephyr-docker\" backend is used then
                                Xephyr starts inside a Docker container.
                                This  backend can be helpful if you have 
                                a system that has Xephyr built without
                                evdev support.
                                Allowed values:
                                    xephyr, xephyr-docker
                                Default value:
                                    " %default-display-server-backend "
  --help, -h                    Print this message and exit.
"))
  (exit))


(define (main args)
  "Program entry point."
  (let* ((options       (getopt-long args *option-spec*))
         (detach-wanted (option-ref options 'detach   #f))
         (pid-file      (option-ref options 'pid-file %default-pid-file))
         (display-server-backend (string->symbol
                                  (option-ref options
                                              'display-server-backend
                                              %default-display-server-backend)))
         (debug-wanted? (option-ref options 'debug    #f))
         (stderr-wanted? (option-ref options 'stderr  #f))
         (help-wanted?  (option-ref options 'help     #f)))

    (unless (or (equal? display-server-backend 'xephyr)
                (equal? display-server-backend 'xephyr-docker))
      (error "Wrong display server backend" display-server-backend))

    (when help-wanted?
      (print-help-and-exit))

    (when stderr-wanted?
      (log-use-stderr! #t))

    (set! *debug?* debug-wanted?)
    (set-system-debug! debug-wanted?)

    (when (file-exists? pid-file)
      (log-info "PID file exists: ~a" pid-file)
      (let ((pid (read-pid pid-file)))
        (if (proc-running? pid)
            (begin
              (log-error "mstd is already running: ~a" pid)
              (exit 1))
            (delete-file pid-file))))

    (when detach-wanted
      (let ((pid (primitive-fork)))
	(cond
	 ((zero? pid)
	  (log-info "mstd started")
	  (setsid))
	 ((> pid 0)
	  (log-info "mstd PID: ~a" pid)
	  (exit))
	 (#t
	  (log-error "Could not fork the process.")
	  (error "Could not fork the process.")))))

    (write-pid pid-file)

    (let ((config (read-seats-configuration %seat-configuration-file)))
      (log-info "Configuration: ~a" config)
      (log-info "Starting display manager ...")
      (let ((pid (dm-start config display-server-backend)))
        (log-info "Display manager PID: ~a" pid))
      (log-info "Starting display manager ... done")
      (device-listener-start config))))

;;; mstd ends here.
